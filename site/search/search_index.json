{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Gemini Agent Framework","text":"<p>A powerful Python framework for building intelligent agents using Google's Gemini API. This framework simplifies the creation of agents that can break down complex tasks into sequential steps using available tools, with support for function calling, variable management, and structured responses.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udee0\ufe0f Easy Tool Definition: Define tools using simple decorators</li> <li>\ud83d\udd04 Sequential Task Breakdown: Automatically breaks down complex tasks into manageable steps</li> <li>\ud83d\udce6 Variable Management: Store and manage variables with metadata</li> <li>\ud83c\udfaf Structured Responses: Define response structures for consistent outputs</li> <li>\ud83d\udd0d Intermediate Results: Access and manage intermediate results</li> <li>\ud83d\udee1\ufe0f Error Handling: Built-in error handling and recovery mechanisms</li> <li>\ud83d\udd0c Extensible: Easy to extend with custom tools and functionality</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from gemini_agent import Agent\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Define your tools\n@Agent.description(\"Multiplies two numbers.\")\n@Agent.parameters({\n    'a': {'type': int, 'description': 'The first number'},\n    'b': {'type': int, 'description': 'The second number'}\n})\ndef multiply(a: int, b: int) -&gt; int:\n    return a * b\n\n# Create an agent instance\nagent = Agent(api_key=\"your-api-key\", tools=[multiply])\n\n# Use the agent\nresponse = agent.prompt(\"Multiply 3 and 7\")\nprint(response)  # Should output 21\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install gemini-agent-framework\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>User Guide</li> <li>API Reference</li> <li>Contributing</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>GitHub Issues</li> <li>Discord Community</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. </p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#agent-class","title":"Agent Class","text":"<p>The main class for creating and managing Gemini agents.</p>"},{"location":"api_reference/#initialization","title":"Initialization","text":"<pre><code>Agent(api_key: str, tools: List[Callable] = None, model_name: str = \"gemini-1.5-flash\")\n</code></pre> <p>Parameters: - <code>api_key</code> (str): Your Google Generative AI API key - <code>tools</code> (List[Callable], optional): List of Python functions or class methods decorated as tools - <code>model_name</code> (str, optional): Name of the Gemini model to use (default: \"gemini-1.5-flash\")</p>"},{"location":"api_reference/#methods","title":"Methods","text":""},{"location":"api_reference/#prompt","title":"prompt","text":"<pre><code>prompt(\n    user_prompt: str,\n    system_prompt: Optional[str] = None,\n    response_structure: Optional[Dict[str, Any]] = None,\n    conversation_history: Optional[List[Dict[str, Any]]] = None\n) -&gt; Any\n</code></pre> <p>Sends a prompt to the agent and returns the response.</p> <p>Parameters: - <code>user_prompt</code> (str): The user's input prompt - <code>system_prompt</code> (str, optional): Custom system prompt to override default - <code>response_structure</code> (Dict[str, Any], optional): Structure for the response - <code>conversation_history</code> (List[Dict[str, Any]], optional): Previous conversation messages</p> <p>Returns: - The agent's response, formatted according to response_structure if provided</p>"},{"location":"api_reference/#set_variable","title":"set_variable","text":"<pre><code>set_variable(name: str, value: Any, description: str = \"\", type_hint: type = None) -&gt; str\n</code></pre> <p>Stores a variable in the agent's memory with metadata.</p> <p>Parameters: - <code>name</code> (str): Variable name - <code>value</code> (Any): Value to store - <code>description</code> (str, optional): Description of the variable - <code>type_hint</code> (type, optional): Type hint for the variable</p> <p>Returns: - The name of the stored variable (may be modified if name already exists)</p>"},{"location":"api_reference/#get_variable","title":"get_variable","text":"<pre><code>get_variable(name: str) -&gt; Any\n</code></pre> <p>Retrieves a stored variable's value.</p> <p>Parameters: - <code>name</code> (str): Name of the variable to retrieve</p> <p>Returns: - The stored value or None if not found</p>"},{"location":"api_reference/#list_variables","title":"list_variables","text":"<pre><code>list_variables() -&gt; Dict[str, Dict[str, Any]]\n</code></pre> <p>Returns information about all stored variables.</p> <p>Returns: - Dictionary mapping variable names to their metadata</p>"},{"location":"api_reference/#decorators","title":"Decorators","text":""},{"location":"api_reference/#agentdescription","title":"@Agent.description","text":"<pre><code>@Agent.description(desc: str)\n</code></pre> <p>Decorator to add a description to a tool function.</p> <p>Parameters: - <code>desc</code> (str): Description of the tool's functionality</p>"},{"location":"api_reference/#agentparameters","title":"@Agent.parameters","text":"<pre><code>@Agent.parameters(params: Dict[str, Dict[str, Any]])\n</code></pre> <p>Decorator to define parameters for a tool function.</p> <p>Parameters: - <code>params</code> (Dict[str, Dict[str, Any]]): Dictionary mapping parameter names to their definitions</p>"},{"location":"api_reference/#type-mapping","title":"Type Mapping","text":"<p>The framework automatically maps Python types to Gemini JSON schema types:</p> Python Type Gemini Type str STRING int INTEGER float NUMBER bool BOOLEAN list ARRAY dict OBJECT"},{"location":"api_reference/#response-structure","title":"Response Structure","text":"<p>The <code>response_structure</code> parameter in the <code>prompt</code> method allows you to define the expected structure of the response:</p> <pre><code>response_structure = {\n    \"field_name\": {\n        \"type\": \"string|number|boolean|array|object\",\n        \"description\": \"Optional description\"\n    }\n}\n</code></pre>"},{"location":"api_reference/#error-handling","title":"Error Handling","text":"<p>The framework includes built-in error handling for: - API errors - Invalid tool definitions - Type conversion errors - Variable management errors</p>"},{"location":"api_reference/#best-practices","title":"Best Practices","text":"<ol> <li>Always provide clear descriptions for tools and parameters</li> <li>Use type hints in your tool functions</li> <li>Structure your responses for consistency</li> <li>Handle errors appropriately in your tools</li> <li>Use meaningful variable names and descriptions </li> </ol>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>This document provides a high-level overview of the Gemini Agent Framework's architecture and design principles.</p>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#1-agent-class","title":"1. Agent Class","text":"<p>The central component of the framework, responsible for: - Managing tool registration and execution - Handling API communication with Gemini - Managing agent state and variables - Processing prompts and responses</p> <pre><code>class Agent:\n    def __init__(self, api_key: str, tools: List[Callable] = None, model_name: str = \"gemini-1.5-flash\"):\n        # Initialize agent with API key and tools\n        pass\n\n    def prompt(self, user_prompt: str, ...) -&gt; Any:\n        # Process user prompt and return response\n        pass\n</code></pre>"},{"location":"architecture/#2-tool-system","title":"2. Tool System","text":"<p>The tool system allows users to define custom functions that the agent can use:</p> <pre><code>@Agent.description(\"Tool description\")\n@Agent.parameters({\n    'param': {'type': type, 'description': 'Parameter description'}\n})\ndef tool_function(param: type) -&gt; return_type:\n    # Tool implementation\n    pass\n</code></pre>"},{"location":"architecture/#tool-registration","title":"Tool Registration","text":"<p>Tools are registered using decorators that: 1. Store tool metadata 2. Validate tool parameters 3. Map Python types to Gemini types 4. Handle tool execution</p>"},{"location":"architecture/#3-variable-management","title":"3. Variable Management","text":"<p>The framework includes a robust variable management system:</p> <pre><code>def set_variable(self, name: str, value: Any, description: str = \"\", type_hint: type = None) -&gt; str:\n    # Store variable with metadata\n    pass\n\ndef get_variable(self, name: str) -&gt; Any:\n    # Retrieve stored variable\n    pass\n</code></pre>"},{"location":"architecture/#variable-storage","title":"Variable Storage","text":"<p>Variables are stored with: - Value - Description - Type information - Creation timestamp - Metadata</p>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#1-prompt-processing","title":"1. Prompt Processing","text":"<pre><code>graph LR\n    A[User Prompt] --&gt; B[Agent]\n    B --&gt; C[Tool Selection]\n    C --&gt; D[Tool Execution]\n    D --&gt; E[Response Generation]\n    E --&gt; F[User Response]\n</code></pre>"},{"location":"architecture/#2-tool-execution","title":"2. Tool Execution","text":"<pre><code>graph LR\n    A[Tool Call] --&gt; B[Parameter Validation]\n    B --&gt; C[Type Conversion]\n    C --&gt; D[Function Execution]\n    D --&gt; E[Result Processing]\n    E --&gt; F[Response]\n</code></pre>"},{"location":"architecture/#type-system","title":"Type System","text":""},{"location":"architecture/#1-python-to-gemini-type-mapping","title":"1. Python to Gemini Type Mapping","text":"Python Type Gemini Type Description str STRING Text data int INTEGER Whole numbers float NUMBER Decimal numbers bool BOOLEAN True/False values list ARRAY Ordered collections dict OBJECT Key-value pairs"},{"location":"architecture/#2-type-validation","title":"2. Type Validation","text":"<p>The framework includes: - Runtime type checking - Automatic type conversion - Error handling for type mismatches</p>"},{"location":"architecture/#error-handling","title":"Error Handling","text":""},{"location":"architecture/#1-error-types","title":"1. Error Types","text":"<p>The framework handles: - API errors - Tool execution errors - Type conversion errors - Variable management errors</p>"},{"location":"architecture/#2-error-recovery","title":"2. Error Recovery","text":"<p>Features include: - Graceful error handling - Error reporting - Recovery mechanisms - User feedback</p>"},{"location":"architecture/#security","title":"Security","text":""},{"location":"architecture/#1-api-key-management","title":"1. API Key Management","text":"<ul> <li>Secure storage</li> <li>Environment variable support</li> <li>No hardcoding</li> </ul>"},{"location":"architecture/#2-input-validation","title":"2. Input Validation","text":"<ul> <li>Parameter validation</li> <li>Type checking</li> <li>Sanitization</li> </ul>"},{"location":"architecture/#performance","title":"Performance","text":""},{"location":"architecture/#1-caching","title":"1. Caching","text":"<ul> <li>Tool result caching</li> <li>Variable caching</li> <li>Response caching</li> </ul>"},{"location":"architecture/#2-optimization","title":"2. Optimization","text":"<ul> <li>Batch processing</li> <li>Parallel execution</li> <li>Resource management</li> </ul>"},{"location":"architecture/#extensibility","title":"Extensibility","text":""},{"location":"architecture/#1-custom-tools","title":"1. Custom Tools","text":"<p>Users can create custom tools by: 1. Defining functions 2. Adding decorators 3. Specifying parameters 4. Implementing logic</p>"},{"location":"architecture/#2-custom-types","title":"2. Custom Types","text":"<p>Support for: - Custom type definitions - Type conversion - Validation rules</p>"},{"location":"architecture/#future-considerations","title":"Future Considerations","text":""},{"location":"architecture/#1-planned-features","title":"1. Planned Features","text":"<ul> <li>Async support</li> <li>Streaming responses</li> <li>Custom model support</li> <li>Enhanced caching</li> </ul>"},{"location":"architecture/#2-architecture-improvements","title":"2. Architecture Improvements","text":"<ul> <li>Modular design</li> <li>Plugin system</li> <li>Enhanced error handling</li> <li>Better type system</li> </ul>"},{"location":"architecture/#contributing","title":"Contributing","text":""},{"location":"architecture/#1-code-structure","title":"1. Code Structure","text":"<pre><code>gemini_agent_framework/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 gemini_agent/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 agent.py\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 docs/\n\u2514\u2500\u2500 examples/\n</code></pre>"},{"location":"architecture/#2-development-guidelines","title":"2. Development Guidelines","text":"<ul> <li>Follow PEP 8</li> <li>Write tests</li> <li>Update documentation</li> <li>Use type hints </li> </ul>"},{"location":"best_practices/","title":"Best Practices","text":"<p>This guide outlines best practices for using the Gemini Agent Framework effectively and building robust agents.</p>"},{"location":"best_practices/#tool-design","title":"Tool Design","text":""},{"location":"best_practices/#1-clear-descriptions","title":"1. Clear Descriptions","text":"<p>Always provide clear, concise descriptions for your tools and parameters:</p> <pre><code># Good\n@Agent.description(\"Calculates the total price including tax.\")\n@Agent.parameters({\n    'price': {'type': float, 'description': 'Base price before tax'},\n    'tax_rate': {'type': float, 'description': 'Tax rate as a decimal (e.g., 0.1 for 10%)'}\n})\n\n# Bad\n@Agent.description(\"Calculates price.\")\n@Agent.parameters({\n    'price': {'type': float, 'description': 'Price'},\n    'tax': {'type': float, 'description': 'Tax'}\n})\n</code></pre>"},{"location":"best_practices/#2-type-hints","title":"2. Type Hints","text":"<p>Always use type hints in your tool functions:</p> <pre><code># Good\ndef calculate_total(price: float, tax_rate: float) -&gt; float:\n    return price * (1 + tax_rate)\n\n# Bad\ndef calculate_total(price, tax_rate):\n    return price * (1 + tax_rate)\n</code></pre>"},{"location":"best_practices/#3-error-handling","title":"3. Error Handling","text":"<p>Implement proper error handling in your tools:</p> <pre><code>@Agent.description(\"Safely performs division.\")\n@Agent.parameters({\n    'a': {'type': float, 'description': 'Numerator'},\n    'b': {'type': float, 'description': 'Denominator'}\n})\ndef safe_divide(a: float, b: float) -&gt; float:\n    try:\n        return a / b\n    except ZeroDivisionError:\n        raise ValueError(\"Cannot divide by zero\")\n    except TypeError:\n        raise ValueError(\"Inputs must be numbers\")\n</code></pre>"},{"location":"best_practices/#agent-configuration","title":"Agent Configuration","text":""},{"location":"best_practices/#1-api-key-management","title":"1. API Key Management","text":"<p>Never hardcode your API key. Use environment variables:</p> <pre><code># Good\nfrom dotenv import load_dotenv\nload_dotenv()\nagent = Agent(api_key=os.getenv('GEMINI_API_KEY'))\n\n# Bad\nagent = Agent(api_key=\"your-api-key-here\")\n</code></pre>"},{"location":"best_practices/#2-model-selection","title":"2. Model Selection","text":"<p>Choose the appropriate model for your use case:</p> <pre><code># For general use\nagent = Agent(api_key=api_key, model_name=\"gemini-1.5-flash\")\n\n# For more complex tasks\nagent = Agent(api_key=api_key, model_name=\"gemini-1.5-pro\")\n</code></pre>"},{"location":"best_practices/#variable-management","title":"Variable Management","text":""},{"location":"best_practices/#1-meaningful-names","title":"1. Meaningful Names","text":"<p>Use clear, descriptive names for variables:</p> <pre><code># Good\nagent.set_variable(\n    'user_preferences',\n    {'theme': 'dark', 'language': 'en'},\n    'User interface preferences',\n    dict\n)\n\n# Bad\nagent.set_variable('prefs', {'t': 'dark', 'l': 'en'}, 'prefs', dict)\n</code></pre>"},{"location":"best_practices/#2-type-hints_1","title":"2. Type Hints","text":"<p>Always specify type hints when storing variables:</p> <pre><code># Good\nagent.set_variable('count', 5, 'Counter', int)\n\n# Bad\nagent.set_variable('count', 5, 'Counter')\n</code></pre>"},{"location":"best_practices/#response-handling","title":"Response Handling","text":""},{"location":"best_practices/#1-structured-responses","title":"1. Structured Responses","text":"<p>Define clear response structures:</p> <pre><code>response_structure = {\n    'result': {'type': 'number', 'description': 'The calculation result'},\n    'steps': {'type': 'array', 'description': 'List of calculation steps'},\n    'explanation': {'type': 'string', 'description': 'Explanation of the calculation'}\n}\n</code></pre>"},{"location":"best_practices/#2-error-responses","title":"2. Error Responses","text":"<p>Handle errors gracefully:</p> <pre><code>try:\n    response = agent.prompt(\"Divide 10 by 0\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n    # Handle error appropriately\n</code></pre>"},{"location":"best_practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"best_practices/#1-tool-caching","title":"1. Tool Caching","text":"<p>Cache frequently used tools:</p> <pre><code># Cache tool results\n@Agent.description(\"Cached calculation.\")\n@Agent.parameters({\n    'input': {'type': float, 'description': 'Input value'}\n})\ndef cached_calculation(input: float) -&gt; float:\n    cache_key = f\"calc_{input}\"\n    cached_result = agent.get_variable(cache_key)\n    if cached_result is not None:\n        return cached_result\n\n    result = expensive_calculation(input)\n    agent.set_variable(cache_key, result, 'Cached calculation result', float)\n    return result\n</code></pre>"},{"location":"best_practices/#2-batch-processing","title":"2. Batch Processing","text":"<p>Process multiple items in batches:</p> <pre><code>@Agent.description(\"Processes multiple items.\")\n@Agent.parameters({\n    'items': {'type': list, 'description': 'List of items to process'}\n})\ndef batch_process(items: list) -&gt; list:\n    results = []\n    for item in items:\n        result = process_item(item)\n        results.append(result)\n    return results\n</code></pre>"},{"location":"best_practices/#security","title":"Security","text":""},{"location":"best_practices/#1-input-validation","title":"1. Input Validation","text":"<p>Always validate input parameters:</p> <pre><code>@Agent.description(\"Processes user input.\")\n@Agent.parameters({\n    'input': {'type': str, 'description': 'User input'}\n})\ndef process_input(input: str) -&gt; str:\n    if not input or len(input) &gt; 1000:\n        raise ValueError(\"Invalid input length\")\n    return sanitize_input(input)\n</code></pre>"},{"location":"best_practices/#2-api-key-security","title":"2. API Key Security","text":"<p>Never expose API keys in logs or error messages:</p> <pre><code># Good\ntry:\n    response = agent.prompt(\"Calculate something\")\nexcept Exception as e:\n    logger.error(\"Error occurred during calculation\")\n    # Don't log the actual error message if it might contain sensitive info\n\n# Bad\ntry:\n    response = agent.prompt(\"Calculate something\")\nexcept Exception as e:\n    logger.error(f\"Error: {e}\")  # Might expose sensitive information\n</code></pre>"},{"location":"best_practices/#testing","title":"Testing","text":""},{"location":"best_practices/#1-unit-tests","title":"1. Unit Tests","text":"<p>Write comprehensive unit tests for your tools:</p> <pre><code>def test_safe_divide():\n    assert safe_divide(10, 2) == 5\n    with pytest.raises(ValueError):\n        safe_divide(10, 0)\n</code></pre>"},{"location":"best_practices/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test the agent with real-world scenarios:</p> <pre><code>def test_calculator_agent():\n    agent = Agent(api_key=test_api_key, tools=[add, subtract])\n    response = agent.prompt(\"What is 5 plus 3?\")\n    assert response == 8\n</code></pre>"},{"location":"best_practices/#documentation","title":"Documentation","text":""},{"location":"best_practices/#1-code-comments","title":"1. Code Comments","text":"<p>Add clear comments to your code:</p> <pre><code># Calculate the total price including tax and discounts\n@Agent.description(\"Calculates final price with tax and discounts.\")\n@Agent.parameters({\n    'price': {'type': float, 'description': 'Base price'},\n    'tax_rate': {'type': float, 'description': 'Tax rate'},\n    'discount': {'type': float, 'description': 'Discount amount'}\n})\ndef calculate_final_price(price: float, tax_rate: float, discount: float) -&gt; float:\n    # Apply discount first\n    discounted_price = price - discount\n    # Then apply tax\n    return discounted_price * (1 + tax_rate)\n</code></pre>"},{"location":"best_practices/#2-readme-updates","title":"2. README Updates","text":"<p>Keep your README up to date with: - New features - Breaking changes - Usage examples - Known issues - Contributing guidelines </p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This guide provides practical examples of using the Gemini Agent Framework for various use cases.</p>"},{"location":"tutorials/#basic-usage","title":"Basic Usage","text":""},{"location":"tutorials/#creating-a-simple-calculator-agent","title":"Creating a Simple Calculator Agent","text":"<pre><code>from gemini_agent import Agent\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Define calculator tools\n@Agent.description(\"Adds two numbers.\")\n@Agent.parameters({\n    'a': {'type': float, 'description': 'First number'},\n    'b': {'type': float, 'description': 'Second number'}\n})\ndef add(a: float, b: float) -&gt; float:\n    return a + b\n\n@Agent.description(\"Subtracts second number from first.\")\n@Agent.parameters({\n    'a': {'type': float, 'description': 'First number'},\n    'b': {'type': float, 'description': 'Second number'}\n})\ndef subtract(a: float, b: float) -&gt; float:\n    return a - b\n\n# Create agent\nagent = Agent(api_key=\"your-api-key\", tools=[add, subtract])\n\n# Use the agent\nresponse = agent.prompt(\"What is 5 plus 3 minus 2?\")\nprint(response)  # Should output 6\n</code></pre>"},{"location":"tutorials/#advanced-usage","title":"Advanced Usage","text":""},{"location":"tutorials/#building-a-task-management-agent","title":"Building a Task Management Agent","text":"<pre><code>from datetime import datetime\nfrom typing import List, Dict\n\n@Agent.description(\"Creates a new task.\")\n@Agent.parameters({\n    'title': {'type': str, 'description': 'Task title'},\n    'description': {'type': str, 'description': 'Task description'},\n    'due_date': {'type': str, 'description': 'Due date (YYYY-MM-DD)'}\n})\ndef create_task(title: str, description: str, due_date: str) -&gt; Dict:\n    return {\n        'title': title,\n        'description': description,\n        'due_date': due_date,\n        'created_at': datetime.now().isoformat(),\n        'status': 'pending'\n    }\n\n@Agent.description(\"Lists all tasks.\")\n@Agent.parameters({})\ndef list_tasks() -&gt; List[Dict]:\n    return agent.get_variable('tasks', [])\n\n# Create agent with task management tools\nagent = Agent(api_key=\"your-api-key\", tools=[create_task, list_tasks])\n\n# Use the agent\nresponse = agent.prompt(\"Create a task to buy groceries due tomorrow\")\nprint(response)\n</code></pre>"},{"location":"tutorials/#creating-a-data-analysis-agent","title":"Creating a Data Analysis Agent","text":"<pre><code>import pandas as pd\nimport numpy as np\n\n@Agent.description(\"Calculates basic statistics for a numeric column.\")\n@Agent.parameters({\n    'data': {'type': list, 'description': 'List of numeric values'},\n    'column_name': {'type': str, 'description': 'Name of the column'}\n})\ndef calculate_stats(data: list, column_name: str) -&gt; Dict:\n    df = pd.DataFrame(data)\n    return {\n        'mean': df[column_name].mean(),\n        'median': df[column_name].median(),\n        'std': df[column_name].std(),\n        'min': df[column_name].min(),\n        'max': df[column_name].max()\n    }\n\n@Agent.description(\"Creates a histogram of numeric data.\")\n@Agent.parameters({\n    'data': {'type': list, 'description': 'List of numeric values'},\n    'bins': {'type': int, 'description': 'Number of histogram bins'}\n})\ndef create_histogram(data: list, bins: int) -&gt; Dict:\n    hist, bin_edges = np.histogram(data, bins=bins)\n    return {\n        'histogram': hist.tolist(),\n        'bin_edges': bin_edges.tolist()\n    }\n\n# Create agent with data analysis tools\nagent = Agent(api_key=\"your-api-key\", tools=[calculate_stats, create_histogram])\n\n# Use the agent\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nagent.set_variable('sample_data', data, 'Sample numeric data', list)\nresponse = agent.prompt(\"Analyze the sample data and create a histogram\")\nprint(response)\n</code></pre>"},{"location":"tutorials/#best-practices","title":"Best Practices","text":""},{"location":"tutorials/#1-error-handling","title":"1. Error Handling","text":"<pre><code>@Agent.description(\"Safely divides two numbers.\")\n@Agent.parameters({\n    'a': {'type': float, 'description': 'Numerator'},\n    'b': {'type': float, 'description': 'Denominator'}\n})\ndef safe_divide(a: float, b: float) -&gt; float:\n    try:\n        return a / b\n    except ZeroDivisionError:\n        raise ValueError(\"Cannot divide by zero\")\n</code></pre>"},{"location":"tutorials/#2-using-response-structures","title":"2. Using Response Structures","text":"<pre><code>response_structure = {\n    'result': {'type': 'number', 'description': 'The calculation result'},\n    'steps': {'type': 'array', 'description': 'List of calculation steps'},\n    'explanation': {'type': 'string', 'description': 'Explanation of the calculation'}\n}\n\nresponse = agent.prompt(\n    \"Calculate 15 * 7 and show your work\",\n    response_structure=response_structure\n)\n</code></pre>"},{"location":"tutorials/#3-managing-variables","title":"3. Managing Variables","text":"<pre><code># Store user preferences\nagent.set_variable(\n    'user_preferences',\n    {\n        'language': 'en',\n        'theme': 'dark',\n        'notifications': True\n    },\n    'User preferences',\n    dict\n)\n\n# Retrieve and use preferences\npreferences = agent.get_variable('user_preferences')\n</code></pre>"},{"location":"tutorials/#common-patterns","title":"Common Patterns","text":""},{"location":"tutorials/#1-chaining-operations","title":"1. Chaining Operations","text":"<pre><code>@Agent.description(\"Performs a series of calculations.\")\n@Agent.parameters({\n    'operations': {'type': list, 'description': 'List of operations to perform'}\n})\ndef chain_operations(operations: list) -&gt; float:\n    result = 0\n    for op in operations:\n        # Each operation is a dict with 'type' and 'value'\n        if op['type'] == 'add':\n            result += op['value']\n        elif op['type'] == 'subtract':\n            result -= op['value']\n    return result\n</code></pre>"},{"location":"tutorials/#2-state-management","title":"2. State Management","text":"<pre><code>@Agent.description(\"Updates the agent's state.\")\n@Agent.parameters({\n    'key': {'type': str, 'description': 'State key'},\n    'value': {'type': 'any', 'description': 'State value'}\n})\ndef update_state(key: str, value: any) -&gt; None:\n    current_state = agent.get_variable('state', {})\n    current_state[key] = value\n    agent.set_variable('state', current_state, 'Agent state', dict)\n</code></pre>"},{"location":"tutorials/#next-steps","title":"Next Steps","text":"<ol> <li>Explore the API Reference for detailed information about all available features</li> <li>Check out the Best Practices guide for tips on building robust agents</li> <li>Join our Discord community for support and discussions </li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install and set up the Gemini Agent Framework.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>A Google Generative AI API key</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<p>The simplest way to install the framework is using pip:</p> <pre><code>pip install gemini-agent-framework\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>If you want to install from source:</p> <ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/m7mdony/gemini-agent-framework.git\ncd gemini-agent-framework\n</code></pre></p> </li> <li> <p>Install the package:    <pre><code>pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development, install with development dependencies:</p> <pre><code>pip install -e \".[dev]\"\n</code></pre> <p>This will install additional tools for development: - pytest for testing - black for code formatting - isort for import sorting - mypy for type checking - flake8 for linting</p>"},{"location":"getting-started/installation/#api-key-setup","title":"API Key Setup","text":"<ol> <li> <p>Get your API key from Google AI Studio</p> </li> <li> <p>Create a <code>.env</code> file in your project root:    <pre><code>GEMINI_API_KEY=your-api-key-here\n</code></pre></p> </li> <li> <p>Load the API key in your code:    <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To verify the installation, run:</p> <pre><code>from gemini_agent import Agent\n\n# Create an agent instance\nagent = Agent(api_key=\"your-api-key\")\n\n# Test the agent\nresponse = agent.prompt(\"Hello, world!\")\nprint(response)\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>API Key Not Found</li> <li>Make sure your <code>.env</code> file exists and contains the correct API key</li> <li> <p>Check that you're loading the environment variables correctly</p> </li> <li> <p>Import Error</p> </li> <li>Verify that the package is installed correctly</li> <li> <p>Check your Python version (must be 3.8 or higher)</p> </li> <li> <p>Dependency Issues</p> </li> <li>Try reinstalling the package</li> <li>Check for conflicting packages</li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues: - Check the GitHub Issues - Join our Discord Community - Create a new issue with details about your problem </p>"}]}